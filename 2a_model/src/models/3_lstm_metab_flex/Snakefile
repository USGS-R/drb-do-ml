from model import LSTMMetabFlex
import sys
sys.path.append("../1_lstm_metab")

from snakemake_utils import get_elev_light_std_means

workdir: "2a_model/src/models/3_lstm_metab_flex"
configfile: "config.yml"

out_dir = os.path.join(config['out_dir'], config['exp_name'])

rule all:
    input:
          expand("{outdir}/exp_{metric_type}_metrics.csv",
                  outdir=out_dir,
                  metric_type=['overall', 'reach']),
          expand("{outdir}/nstates_{nstates}/nep_{epochs}/rep_{rep}/plots/ts_{site_id}_{year}.png",
                 outdir=out_dir,
                 nstates=config['hidden_size'],
                 epochs=config['epochs'],
                 rep=list(range(config['num_replicates'])),
                 site_id=['01480870'],
                 year=[2012])
        

module base_workflow:
    snakefile: "../Snakefile_base.smk"
    config: config


use rule * from base_workflow as base_*


def get_model(wildcards, input):
    el_mean, el_std, lt_mean, lt_std = get_elev_light_std_means(input[0])
    model = LSTMMetabFlex(int(wildcards.nstates),
                          elev_mean=el_mean,
                          elev_std=el_std,
                          elev_idx=6,
                          light_ratio_mean=lt_mean,
                          light_ratio_std=lt_std,
                          light_ratio_idx=-1,
                          recurrent_dropout=config['recurrent_dropout'],
                          dropout=config['dropout'],
                          ) 
    return model


use rule train from base_workflow as base_train with:
    input:
        "../../../out/models/1_lstm_metab/prepped.npz"
    params:
        model = get_model

use rule make_predictions from base_workflow as base_make_predictions with:
    input:
        "../../../out/models/1_lstm_metab/prepped.npz",
        "{outdir}/nstates_{nstates}/nep_{epochs}/rep_{rep}/train_weights/",
        "../../../out/well_obs_inputs.zarr",
    params:
        model = get_model
